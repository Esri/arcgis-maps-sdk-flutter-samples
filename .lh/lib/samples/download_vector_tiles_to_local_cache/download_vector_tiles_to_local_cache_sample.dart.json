{
    "sourceFile": "lib/samples/download_vector_tiles_to_local_cache/download_vector_tiles_to_local_cache_sample.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1721758745423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721758812305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,15 +68,10 @@\n                   children: [\n                     // A button to show the Settings bottom sheet.\n                     ElevatedButton(\n                       onPressed: () => setState(() => _settingsVisible = true),\n-                      child: const Text('Settings'),\n+                      child: const Text('Download Vector Tiles'),\n                     ),\n-                    // A button to clear the buffers.\n-                    ElevatedButton(\n-                      onPressed: clear,\n-                      child: const Text('Clear'),\n-                    ),\n                   ],\n                 ),\n               ],\n             ),\n@@ -93,9 +88,9 @@\n           ],\n         ),\n       ),\n       // The Settings bottom sheet.\n-      bottomSheet: _settingsVisible ? buildSettings(context) : null,\n+      bottomSheet: null,\n     );\n   }\n \n   // The build method for the Settings bottom sheet.\n"
                },
                {
                    "date": 1721758872537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,8 @@\n             ),\n           ],\n         ),\n       ),\n-      // The Settings bottom sheet.\n-      bottomSheet: null,\n     );\n   }\n \n   // The build method for the Settings bottom sheet.\n"
                },
                {
                    "date": 1721759730381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,14 +32,10 @@\n     extends State<DownloadVectorTilesToLocalCacheSample>\n     with SampleStateSupport {\n   // Create a controller for the map view.\n   final _mapViewController = ArcGISMapView.createController();\n-  // The graphics overlay for the geodetic buffers.\n+  // The graphics overlay to show a red outline square around the vector tiles to be downloaded\n   final _geodeticOverlay = GraphicsOverlay();\n-  // The graphics overlay for the planar buffers.\n-  final _planarOverlay = GraphicsOverlay();\n-  // The graphics overlay for the tapped points.\n-  final _pointOverlay = GraphicsOverlay();\n   // A flag for when the map view is ready and controls can be used.\n   var _ready = false;\n   // A flag for when the settings bottom sheet is visible.\n   var _settingsVisible = false;\n@@ -90,107 +86,8 @@\n       ),\n     );\n   }\n \n-  // The build method for the Settings bottom sheet.\n-  Widget buildSettings(BuildContext context) {\n-    return Container(\n-      color: Colors.white,\n-      padding: EdgeInsets.fromLTRB(\n-        20.0,\n-        0.0,\n-        20.0,\n-        max(\n-          20.0,\n-          View.of(context).viewPadding.bottom /\n-              View.of(context).devicePixelRatio,\n-        ),\n-      ),\n-      child: Column(\n-        mainAxisSize: MainAxisSize.min,\n-        children: [\n-          Row(\n-            children: [\n-              Text(\n-                'Download Vector Tiles',\n-                style: Theme.of(context).textTheme.titleLarge,\n-              ),\n-              const Spacer(),\n-              IconButton(\n-                icon: const Icon(Icons.close),\n-                onPressed: () => setState(() => _settingsVisible = false),\n-              ),\n-            ],\n-          ),\n-          Row(\n-            children: [\n-              const Text('Buffer Radius (miles)'),\n-              const Spacer(),\n-              Text(\n-                _bufferRadius.round().toString(),\n-                textAlign: TextAlign.right,\n-              ),\n-            ],\n-          ),\n-          Row(\n-            children: [\n-              Expanded(\n-                // A slider to adjust the buffer radius.\n-                child: Slider(\n-                  value: _bufferRadius,\n-                  min: 200.0,\n-                  max: 2000.0,\n-                  onChanged: (value) => setState(() => _bufferRadius = value),\n-                ),\n-              ),\n-            ],\n-          ),\n-          Row(\n-            children: [\n-              SizedBox(\n-                width: 30.0,\n-                height: 30.0,\n-                child: Container(\n-                  decoration: const BoxDecoration(\n-                    shape: BoxShape.circle,\n-                    color: Colors.green,\n-                  ),\n-                  child: Container(\n-                    decoration: BoxDecoration(\n-                      shape: BoxShape.circle,\n-                      border: Border.all(color: Colors.black, width: 2.0),\n-                      color: Colors.red.withAlpha(127),\n-                    ),\n-                  ),\n-                ),\n-              ),\n-              const SizedBox(width: 10.0),\n-              const Text('Planar Buffer'),\n-            ],\n-          ),\n-          const SizedBox(height: 10.0),\n-          Row(\n-            children: [\n-              SizedBox(\n-                width: 30.0,\n-                height: 30.0,\n-                child: Container(\n-                  decoration: BoxDecoration(\n-                    shape: BoxShape.circle,\n-                    border: Border.all(color: Colors.black, width: 2.0),\n-                    color: Colors.green,\n-                  ),\n-                ),\n-              ),\n-              const SizedBox(width: 10.0),\n-              const Text('Geodetic Buffer'),\n-            ],\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n-\n   void onMapViewReady() {\n     // Configure the graphics overlay for the geodetic buffers.\n     _geodeticOverlay.renderer = SimpleRenderer(\n       symbol: SimpleFillSymbol(\n"
                },
                {
                    "date": 1721759869495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,15 @@\n     extends State<DownloadVectorTilesToLocalCacheSample>\n     with SampleStateSupport {\n   // Create a controller for the map view.\n   final _mapViewController = ArcGISMapView.createController();\n-  // The graphics overlay to show a red outline square around the vector tiles to be downloaded\n-  final _geodeticOverlay = GraphicsOverlay();\n+  // The graphics overlay to show a red outline square around the vector tiles \n+  // to be downloaded\n+  final _downloadVectorTilesOverlay = GraphicsOverlay();\n   // A flag for when the map view is ready and controls can be used.\n   var _ready = false;\n   // A flag for when the settings bottom sheet is visible.\n   var _settingsVisible = false;\n-  // The buffer radius in miles.\n-  var _bufferRadius = 500.0;\n \n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n@@ -88,48 +87,25 @@\n   }\n \n   void onMapViewReady() {\n     // Configure the graphics overlay for the geodetic buffers.\n-    _geodeticOverlay.renderer = SimpleRenderer(\n+    _downloadVectorTilesOverlay.renderer = SimpleRenderer(\n       symbol: SimpleFillSymbol(\n         style: SimpleFillSymbolStyle.solid,\n-        color: Colors.green,\n+        color: Colors.red[200],\n         outline: SimpleLineSymbol(\n           style: SimpleLineSymbolStyle.solid,\n-          color: Colors.black,\n+          color: Colors.red,\n           width: 2.0,\n         ),\n       ),\n     );\n-    _geodeticOverlay.opacity = 0.5;\n+    _downloadVectorTilesOverlay.opacity = 0.5;\n \n-    // Configure the graphics overlay for the planar buffers.\n-    _planarOverlay.renderer = SimpleRenderer(\n-      symbol: SimpleFillSymbol(\n-        style: SimpleFillSymbolStyle.solid,\n-        color: Colors.red,\n-        outline: SimpleLineSymbol(\n-          style: SimpleLineSymbolStyle.solid,\n-          color: Colors.black,\n-          width: 2.0,\n-        ),\n-      ),\n-    );\n-    _planarOverlay.opacity = 0.5;\n-\n-    // Configure the graphics overlay for the tapped points.\n-    _pointOverlay.renderer = SimpleRenderer(\n-      symbol: SimpleMarkerSymbol(\n-        style: SimpleMarkerSymbolStyle.cross,\n-        color: Colors.white,\n-        size: 14.0,\n-      ),\n-    );\n-\n     // Add the overlays to the map view.\n     _mapViewController.graphicsOverlays.addAll(\n       [\n-        _geodeticOverlay,\n+        _downloadVectorTilesOverlay,\n         _planarOverlay,\n         _pointOverlay,\n       ],\n     );\n@@ -156,9 +132,9 @@\n       curveType: GeodeticCurveType.geodesic,\n     );\n     // Create and add a graphic to the geodetic overlay.\n     final geodeticGraphic = Graphic(geometry: geodeticGeometry);\n-    _geodeticOverlay.graphics.add(geodeticGraphic);\n+    _downloadVectorTilesOverlay.graphics.add(geodeticGraphic);\n \n     // Create a planar buffer around the tapped point at the specified distance.\n     final planarGeometry = GeometryEngine.buffer(\n       geometry: mapPoint,\n@@ -174,9 +150,9 @@\n   }\n \n   // Clear the graphics overlays.\n   void clear() {\n-    _geodeticOverlay.graphics.clear();\n+    _downloadVectorTilesOverlay.graphics.clear();\n     _planarOverlay.graphics.clear();\n     _pointOverlay.graphics.clear();\n   }\n }\n"
                },
                {
                    "date": 1721759909096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n     // Configure the graphics overlay for the geodetic buffers.\n     _downloadVectorTilesOverlay.renderer = SimpleRenderer(\n       symbol: SimpleFillSymbol(\n         style: SimpleFillSymbolStyle.solid,\n-        color: Colors.red[200],\n+        color: Colors.red[200]!.withOpacity(0.5),\n         outline: SimpleLineSymbol(\n           style: SimpleLineSymbolStyle.solid,\n           color: Colors.red,\n           width: 2.0,\n"
                },
                {
                    "date": 1721759922821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,8 @@\n     // Add the overlays to the map view.\n     _mapViewController.graphicsOverlays.addAll(\n       [\n         _downloadVectorTilesOverlay,\n-        _planarOverlay,\n-        _pointOverlay,\n       ],\n     );\n \n     // Create a map with the topographic basemap style and set to the map view.\n"
                },
                {
                    "date": 1721759958001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n       ],\n     );\n \n     // Create a map with the topographic basemap style and set to the map view.\n-    final map = ArcGISMap.withBasemapStyle(BasemapStyle.arcGISTopographic);\n+    final map = ArcGISMap.withBasemapStyle(BasemapStyle.arcGISStreetsNight);\n     _mapViewController.arcGISMap = map;\n \n     // Set the ready state variable to true to enable the sample UI.\n     setState(() => _ready = true);\n"
                },
                {
                    "date": 1721760195865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,11 @@\n \n     // Create a map with the topographic basemap style and set to the map view.\n     final map = ArcGISMap.withBasemapStyle(BasemapStyle.arcGISStreetsNight);\n     _mapViewController.arcGISMap = map;\n+    _mapViewController.interactionOptions.enabled = false;\n \n+    \n     // Set the ready state variable to true to enable the sample UI.\n     setState(() => _ready = true);\n   }\n \n"
                },
                {
                    "date": 1721760220656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n \n     // Create a map with the topographic basemap style and set to the map view.\n     final map = ArcGISMap.withBasemapStyle(BasemapStyle.arcGISStreetsNight);\n     _mapViewController.arcGISMap = map;\n-    _mapViewController.interactionOptions.enabled = false;\n+    _mapViewController.interactionOptions.rotateEnabled = false;\n \n     // Set the ready state variable to true to enable the sample UI.\n     setState(() => _ready = true);\n   }\n"
                },
                {
                    "date": 1721760402996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,8 +111,17 @@\n     // Create a map with the topographic basemap style and set to the map view.\n     final map = ArcGISMap.withBasemapStyle(BasemapStyle.arcGISStreetsNight);\n     _mapViewController.arcGISMap = map;\n     _mapViewController.interactionOptions.rotateEnabled = false;\n+    _mapViewController.setViewpoint(\n+      Viewpoint.fromCenter(\n+        ArcGISPoint(\n+          y: 34.057386,\n+          x: -117.195800,\n+        ),\n+        scale: 100000,\n+      ),\n+    );\n \n     // Set the ready state variable to true to enable the sample UI.\n     setState(() => _ready = true);\n   }\n"
                }
            ],
            "date": 1721758745423,
            "name": "Commit-0",
            "content": "//\n// Copyright 2024 Esri\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\nimport 'dart:math';\nimport 'package:arcgis_maps/arcgis_maps.dart';\nimport 'package:flutter/material.dart';\n\nimport '../../utils/sample_state_support.dart';\n\nclass DownloadVectorTilesToLocalCacheSample extends StatefulWidget {\n  const DownloadVectorTilesToLocalCacheSample({super.key});\n\n  @override\n  State<DownloadVectorTilesToLocalCacheSample> createState() =>\n      _DownloadVectorTilesToLocalCacheSampleState();\n}\n\nclass _DownloadVectorTilesToLocalCacheSampleState\n    extends State<DownloadVectorTilesToLocalCacheSample>\n    with SampleStateSupport {\n  // Create a controller for the map view.\n  final _mapViewController = ArcGISMapView.createController();\n  // The graphics overlay for the geodetic buffers.\n  final _geodeticOverlay = GraphicsOverlay();\n  // The graphics overlay for the planar buffers.\n  final _planarOverlay = GraphicsOverlay();\n  // The graphics overlay for the tapped points.\n  final _pointOverlay = GraphicsOverlay();\n  // A flag for when the map view is ready and controls can be used.\n  var _ready = false;\n  // A flag for when the settings bottom sheet is visible.\n  var _settingsVisible = false;\n  // The buffer radius in miles.\n  var _bufferRadius = 500.0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: SafeArea(\n        top: false,\n        child: Stack(\n          children: [\n            Column(\n              children: [\n                Expanded(\n                  // Add a map view to the widget tree and set a controller.\n                  child: ArcGISMapView(\n                    controllerProvider: () => _mapViewController,\n                    onMapViewReady: onMapViewReady,\n                    onTap: onTap,\n                  ),\n                ),\n                Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                  children: [\n                    // A button to show the Settings bottom sheet.\n                    ElevatedButton(\n                      onPressed: () => setState(() => _settingsVisible = true),\n                      child: const Text('Settings'),\n                    ),\n                    // A button to clear the buffers.\n                    ElevatedButton(\n                      onPressed: clear,\n                      child: const Text('Clear'),\n                    ),\n                  ],\n                ),\n              ],\n            ),\n            // Display a progress indicator and prevent interaction until state is ready.\n            Visibility(\n              visible: !_ready,\n              child: SizedBox.expand(\n                child: Container(\n                  color: Colors.white30,\n                  child: const Center(child: CircularProgressIndicator()),\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n      // The Settings bottom sheet.\n      bottomSheet: _settingsVisible ? buildSettings(context) : null,\n    );\n  }\n\n  // The build method for the Settings bottom sheet.\n  Widget buildSettings(BuildContext context) {\n    return Container(\n      color: Colors.white,\n      padding: EdgeInsets.fromLTRB(\n        20.0,\n        0.0,\n        20.0,\n        max(\n          20.0,\n          View.of(context).viewPadding.bottom /\n              View.of(context).devicePixelRatio,\n        ),\n      ),\n      child: Column(\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          Row(\n            children: [\n              Text(\n                'Download Vector Tiles',\n                style: Theme.of(context).textTheme.titleLarge,\n              ),\n              const Spacer(),\n              IconButton(\n                icon: const Icon(Icons.close),\n                onPressed: () => setState(() => _settingsVisible = false),\n              ),\n            ],\n          ),\n          Row(\n            children: [\n              const Text('Buffer Radius (miles)'),\n              const Spacer(),\n              Text(\n                _bufferRadius.round().toString(),\n                textAlign: TextAlign.right,\n              ),\n            ],\n          ),\n          Row(\n            children: [\n              Expanded(\n                // A slider to adjust the buffer radius.\n                child: Slider(\n                  value: _bufferRadius,\n                  min: 200.0,\n                  max: 2000.0,\n                  onChanged: (value) => setState(() => _bufferRadius = value),\n                ),\n              ),\n            ],\n          ),\n          Row(\n            children: [\n              SizedBox(\n                width: 30.0,\n                height: 30.0,\n                child: Container(\n                  decoration: const BoxDecoration(\n                    shape: BoxShape.circle,\n                    color: Colors.green,\n                  ),\n                  child: Container(\n                    decoration: BoxDecoration(\n                      shape: BoxShape.circle,\n                      border: Border.all(color: Colors.black, width: 2.0),\n                      color: Colors.red.withAlpha(127),\n                    ),\n                  ),\n                ),\n              ),\n              const SizedBox(width: 10.0),\n              const Text('Planar Buffer'),\n            ],\n          ),\n          const SizedBox(height: 10.0),\n          Row(\n            children: [\n              SizedBox(\n                width: 30.0,\n                height: 30.0,\n                child: Container(\n                  decoration: BoxDecoration(\n                    shape: BoxShape.circle,\n                    border: Border.all(color: Colors.black, width: 2.0),\n                    color: Colors.green,\n                  ),\n                ),\n              ),\n              const SizedBox(width: 10.0),\n              const Text('Geodetic Buffer'),\n            ],\n          ),\n        ],\n      ),\n    );\n  }\n\n  void onMapViewReady() {\n    // Configure the graphics overlay for the geodetic buffers.\n    _geodeticOverlay.renderer = SimpleRenderer(\n      symbol: SimpleFillSymbol(\n        style: SimpleFillSymbolStyle.solid,\n        color: Colors.green,\n        outline: SimpleLineSymbol(\n          style: SimpleLineSymbolStyle.solid,\n          color: Colors.black,\n          width: 2.0,\n        ),\n      ),\n    );\n    _geodeticOverlay.opacity = 0.5;\n\n    // Configure the graphics overlay for the planar buffers.\n    _planarOverlay.renderer = SimpleRenderer(\n      symbol: SimpleFillSymbol(\n        style: SimpleFillSymbolStyle.solid,\n        color: Colors.red,\n        outline: SimpleLineSymbol(\n          style: SimpleLineSymbolStyle.solid,\n          color: Colors.black,\n          width: 2.0,\n        ),\n      ),\n    );\n    _planarOverlay.opacity = 0.5;\n\n    // Configure the graphics overlay for the tapped points.\n    _pointOverlay.renderer = SimpleRenderer(\n      symbol: SimpleMarkerSymbol(\n        style: SimpleMarkerSymbolStyle.cross,\n        color: Colors.white,\n        size: 14.0,\n      ),\n    );\n\n    // Add the overlays to the map view.\n    _mapViewController.graphicsOverlays.addAll(\n      [\n        _geodeticOverlay,\n        _planarOverlay,\n        _pointOverlay,\n      ],\n    );\n\n    // Create a map with the topographic basemap style and set to the map view.\n    final map = ArcGISMap.withBasemapStyle(BasemapStyle.arcGISTopographic);\n    _mapViewController.arcGISMap = map;\n\n    // Set the ready state variable to true to enable the sample UI.\n    setState(() => _ready = true);\n  }\n\n  void onTap(Offset screenPoint) {\n    // Capture the tapped point and convert it to a map point.\n    final mapPoint = _mapViewController.screenToLocation(screen: screenPoint);\n    if (mapPoint == null) return;\n\n    // Create a geodetic buffer around the tapped point at the specified distance.\n    final geodeticGeometry = GeometryEngine.bufferGeodetic(\n      geometry: mapPoint,\n      distance: _bufferRadius,\n      distanceUnit: LinearUnit(unitId: LinearUnitId.miles),\n      maxDeviation: double.nan,\n      curveType: GeodeticCurveType.geodesic,\n    );\n    // Create and add a graphic to the geodetic overlay.\n    final geodeticGraphic = Graphic(geometry: geodeticGeometry);\n    _geodeticOverlay.graphics.add(geodeticGraphic);\n\n    // Create a planar buffer around the tapped point at the specified distance.\n    final planarGeometry = GeometryEngine.buffer(\n      geometry: mapPoint,\n      distance: _bufferRadius * 1609.344, // Convert miles to meters.\n    );\n    // Create and add a graphic to the planar overlay.\n    final planarGraphic = Graphic(geometry: planarGeometry);\n    _planarOverlay.graphics.add(planarGraphic);\n\n    // Create and add a graphic to the point overlay.\n    final pointGraphic = Graphic(geometry: mapPoint);\n    _pointOverlay.graphics.add(pointGraphic);\n  }\n\n  // Clear the graphics overlays.\n  void clear() {\n    _geodeticOverlay.graphics.clear();\n    _planarOverlay.graphics.clear();\n    _pointOverlay.graphics.clear();\n  }\n}\n"
        }
    ]
}